#!/usr/bin/env python3
VERSION="220915 1.0"

import os
import sys
import argparse
import signal
import base64
import tarfile
import tempfile
import textwrap
import random
import string
from enum import Enum

MARKER_PREFIX="@@@>>>"
MARKER_SUFFIX="@@@<<<"
LONGSTRING="'''"

###

class fmt:
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BG_GRAY = '\033[100m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'
    def bold(text):
        return fmt.BOLD + text + fmt.END
    def green(text):
        return fmt.GREEN + text + fmt.END
    def cyan(text):
        return fmt.CYAN + text + fmt.END
    def darkcyan(text):
        return fmt.DARKCYAN + text + fmt.END
    def blue(text):
        return fmt.BLUE + text + fmt.END
    def yellow(text):
        return fmt.YELLOW + text + fmt.END
    def red(text):
        return fmt.RED + text + fmt.END
    def bggray(text):
        return fmt.BG_GRAY + text + fmt.END

###

class Platform(Enum):
    posix = 'posix'

    def shellbang(value):
        if value == Platform.posix:
            return '#!/usr/bin/env sh'

    def commenter(value):
        if value == Platform.posix:
            return '#'

    def __str__(self):
        return self.value


class Tarmode(Enum):
    tar = 'tar'
    gz = 'gz'
    bz2 = 'bz2'
    xz = 'xz'
    def __str__(self):
        return self.value

class MakeInstall:

    def main():
        global MODULE_ROOT, MODULE_ROOTN, MODULE_CONFIG, mapper, checkinglist, categories
        signal.signal(signal.SIGINT, MakeInstall.signal_handler)

        parser = argparse.ArgumentParser(prog='MakeInstall', description='Tarball installer for folders and files\n', add_help=False)
        parser.add_argument('path', type=str, nargs='+')
        parser.add_argument('-o', dest='outfile', default="", type=str, help=f"Output to outfile (default to stdout)")
        parser.add_argument('-p', dest='platform', default=Platform.posix, type=Platform, choices=list(Platform), help=f"Target platform (default to posix)")
        parser.add_argument('-e', dest='executable', default='', type=str, help=f"Executable to run in post-install phase. The decompress diretory is passed as first argument")
        parser.add_argument('-m', dest='tarmode', default=Tarmode.gz, type=Tarmode, choices=list(Tarmode), help=f"Embedded tarball mode (default to gz)")
        parser.add_argument('--native', dest='native', default=False, action='store_true', help=f"Use native tarball without base64 in installer")
        parser.add_argument('--silent', dest='verbose', default=True, action='store_false', help=f"Silent the compress and decompress progress")
        parser.add_argument('-v', '--version', action='version', version='%(prog)s {version}'.format(version=VERSION), help="Show version number and exit")
        parser.add_argument('-h', '--help', action='help', help=f"Show this help message and exit")

        args = parser.parse_args()
        paths = args.path
        outfile = args.outfile
        tarmode = args.tarmode
        platform = args.platform
        native = args.native
        verbose = args.verbose

        if platform != Platform.posix:
            raise "No supported platform " + str(platform)

        with tempfile.TemporaryDirectory() as tmpdir:
            tarname = os.path.join(tmpdir, f'tmp.tar')
            if tarmode == Tarmode.tar:
                tarmode = ""
            with tarfile.open(tarname, f"w:{tarmode}") as tar:
                for path in paths:
                    if not os.path.exists(path):
                        MakeInstall.perror(f"{path} is not exists")
                    def set_permission(info, path):
                        info.mode = os.stat(path).st_mode & 0o777
                        return info
                    tar.add(path, filter=lambda info: set_permission(info, path))
                    if verbose and outfile:
                        print(path)
            with open(tarname, "rb") as tar:
                binary = tar.read()
                commenter = Platform.commenter(platform)
                prefix = commenter + MARKER_PREFIX
                suffix = commenter + MARKER_SUFFIX
                if native:
                    content = [binary.decode(errors='ignore')]
                    while prefix in content:
                        prefix += random.choice(string.ascii_letters)
                    while suffix in content:
                        suffix += random.choice(string.ascii_letters)
                else:
                    b64byte = base64.encodebytes(binary).decode("ascii")
                    content = b64byte.replace("\\n", "\n").rstrip().splitlines()
                    content = [commenter + line for line in content]
                embedded = []
                embedded.append(prefix)
                embedded += content
                embedded.append(suffix)

                text = []
                text.append(Platform.shellbang(platform))
                text.append(f"")
                text.append(f"SLINE=$(grep -ne '^{prefix}' $0 | cut -f1 -d:)")
                text.append(f"ELINE=$(grep -ne '^{suffix}' $0 | cut -f1 -d:)")
                text.append(f"let SLINE++")
                text.append(f"let ELINE--")

                text.append(f"TAR=$(mktemp)")
                if native:
                    text.append(f"cat $0 | sed -n ${{SLINE}},${{ELINE}}p > $TAR")
                else:
                    text.append(f"B64=$(mktemp)")
                    text.append(f"cat $0 | sed -n ${{SLINE}},${{ELINE}}p | cut -c {len(commenter) + 1}- > $B64")
                    text.append(f"base64 -d $B64 > $TAR")
                    text.append(f"rm -f $B64")
                if verbose:
                    text.append(f"tar -xvf $TAR")
                else:
                    text.append(f"tar -xf $TAR")
                text.append(f"rm -f $TAR")

                text.append(f"")
                text.append(f"{commenter}The following comments encode a tarball with base64. DO NOT modify them.")
                text += embedded
                text.append(f"{commenter}End of encode comments.")
                text.append(f"")

                outfd = open(outfile, 'w') if outfile else sys.stdout
                outfd.write("\n".join(text))
                if outfd is not sys.stdout:
                    outfd.close()
                    os.chmod(outfile, 0o700)
                    print("")
                    print(f"Total {len(paths)} paths to {outfile}")

    def perror(text):
        print(fmt.red("[ERROR] ") + text, file=sys.stderr)
        sys.exit(1)

    def signal_handler(sig, frame):
        print('')
        sys.exit(1)

if __name__ == '__main__':
    MakeInstall.main()


name: Test Code in include/mys

# Check https://oneapi-src.github.io/oneapi-ci/ for all available intel oneAPI components version

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-linux-intel:
    name: Test with ${{ matrix.intel_compiler_type }} and intelmpi on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        intel_compiler_type: ['icc']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Intel Apt repository
        timeout-minutes: 5
        run: |
          curl -sS -L https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/oneAPI.list" -o APT::Get::List-Cleanup="0"

      - name: Install Intel classic icc compiler
        if:   ${{ matrix.intel_compiler_type == 'icc' }}
        timeout-minutes: 5
        run: |
          sudo apt-get install -y gcc-10 g++-10
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
          sudo apt-get install --no-install-recommends intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2023.1.0
          gcc --version
          g++ --version

      - name: Install Intel modern icx compiler
        if:   ${{ matrix.intel_compiler_type == 'icx' }}
        timeout-minutes: 5
        run: sudo apt-get install --no-install-recommends intel-oneapi-compiler-dpcpp-cpp-2025.2

      - name: Install Intel MPI
        timeout-minutes: 5
        run: sudo apt-get install --no-install-recommends intel-oneapi-mpi-2021.9.0 intel-oneapi-mpi-devel-2021.9.0

      - name: Setup Intel classic icc compiler
        if:   ${{ matrix.intel_compiler_type == 'icc' }}
        run: |
          echo "I_MPI_CC=icc" >> $GITHUB_ENV
          echo "I_MPI_CXX=icpc" >> $GITHUB_ENV
          echo "TEST_CC=icc" >> $GITHUB_ENV
          echo "TEST_CXX=icpc" >> $GITHUB_ENV
          echo "TEST_MPICC=mpiicc" >> $GITHUB_ENV
          echo "TEST_MPICXX=mpiicpc" >> $GITHUB_ENV

      - name: Setup Intel modern icx compiler
        if:   ${{ matrix.intel_compiler_type == 'icx' }}
        run: |
          echo "I_MPI_CC=icx" >> $GITHUB_ENV
          echo "I_MPI_CXX=icpx" >> $GITHUB_ENV
          echo "TEST_CC=icx" >> $GITHUB_ENV
          echo "TEST_CXX=icpx" >> $GITHUB_ENV
          echo "TEST_MPICC=mpiicc" >> $GITHUB_ENV
          echo "TEST_MPICXX=mpiicpc" >> $GITHUB_ENV

      - name: Verify Intel compiler & MPI
        run: |
          ls /opt/intel/oneapi /opt/intel/oneapi/compiler /opt/intel/oneapi/mpi
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
          echo "PATH='$PATH'"
          echo "LD_LIBRARY_PATH='$LD_LIBRARY_PATH'"
          echo "[Verify icc path] $(which icc 2>/dev/null || echo not found)"
          echo "[Verify icpc path] $(which icpc 2>/dev/null || echo not found)"
          echo "[Verify icx path] $(which icx 2>/dev/null || echo not found)"
          echo "[Verify icpx path] $(which icpx 2>/dev/null || echo not found)"
          echo "[Verify mpiicc path] $(which mpiicc 2>/dev/null || echo not found)"
          echo "[Verify mpiicpc path] $(which mpiicpc 2>/dev/null || echo not found)"
          echo "[Verify mpirun path] $(which mpirun 2>/dev/null || echo not found)"
          echo "[Check icc version]" && icc --version 2>/dev/null || echo "not found"
          echo "[Check icpc version]" && icpc --version 2>/dev/null || echo "not found"
          echo "[Check icx version]" && icx --version 2>/dev/null || echo "not found"
          echo "[Check icpx version]" && icpx --version 2>/dev/null || echo "not found"
          echo "[Check mpiicc version]" && mpiicc --version 2>/dev/null || echo "not found"
          echo "[Check mpiicpc version]" && mpiicpc --version 2>/dev/null || echo "not found"
          echo "[Check mpirun version]" && mpirun --version 2>/dev/null || echo "not found"

      - name: Build tests in test/ folder
        timeout-minutes: 5
        run: |
          cd test
          make

      - name: Run tests in test/ folder
        timeout-minutes: 5
        run: |
          cd test
          ./ex01.hello-gcc.exe
          ./ex02.hello-g++.exe
          mpirun -n 2 ./ex03.hello-mpicc.exe
          mpirun -n 2 ./ex04.hello-mpic++.exe

  # test-linux-gcc:
  #   name: Test with GCC and ${{ matrix.mpi }} on Linux
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       mpi: [ 'mpich', 'openmpi' ]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install ${{ matrix.mpi }} MPI
  #       uses: mpi4py/setup-mpi@v1
  #       with:
  #         mpi: ${{ matrix.mpi }}

  #     - name: Verify GCC compilers & ${{ matrix.mpi }} MPI
  #       run: |
  #         echo "PATH='$PATH'"
  #         echo "LD_LIBRARY_PATH='$LD_LIBRARY_PATH'"
  #         echo "[Verify gcc path] $(which gcc 2>/dev/null || echo not found)"
  #         echo "[Verify g++ path] $(which g++ 2>/dev/null || echo not found)"
  #         echo "[Verify mpicc path] $(which mpicc 2>/dev/null || echo not found)"
  #         echo "[Verify mpic++ path] $(which mpic++ 2>/dev/null || echo not found)"
  #         echo "[Verify mpirun path] $(which mpirun 2>/dev/null || echo not found)"
  #         echo "[Check gcc version]" && gcc --version 2>/dev/null || echo "not found"
  #         echo "[Check g++ version]" && g++ --version 2>/dev/null || echo "not found"
  #         echo "[Check mpicc version]" && mpicc --version 2>/dev/null || echo "not found"
  #         echo "[Check mpic++ version]" && mpic++ --version 2>/dev/null || echo "not found"
  #         echo "[Check mpirun version]" && mpirun --version 2>/dev/null || echo "not found"

  #     - name: Setup GCC compilers & ${{ matrix.mpi }} MPI
  #       run: |
  #         echo "TEST_CC=gcc" >> $GITHUB_ENV
  #         echo "TEST_CXX=g++" >> $GITHUB_ENV
  #         echo "TEST_MPICC=mpicc" >> $GITHUB_ENV
  #         echo "TEST_MPICXX=mpic++" >> $GITHUB_ENV

  #     - name: Build tests in test/ folder
  #       timeout-minutes: 5
  #       run: |
  #         cd test
  #         make

  #     - name: Run tests in test/ folder
  #       timeout-minutes: 5
  #       run: |
  #         cd test
  #         ./ex01.hello-gcc.exe
  #         ./ex02.hello-g++.exe
  #         mpirun -n 2 ./ex03.hello-mpicc.exe
  #         mpirun -n 2 ./ex04.hello-mpic++.exe

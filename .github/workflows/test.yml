name: Test Code in include/mys

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-linux-intel:
    name: Test with IntelMPI on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        oneapi-compiler: [2025.1]
        oneapi-mpi: [2021.16]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Intel Apt repository
        timeout-minutes: 5
        run: |
          curl -sS -L https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/oneAPI.list" -o APT::Get::List-Cleanup="0"

      - name: Install Intel compilers & MPI
        timeout-minutes: 5
        run: |
          sudo apt-get install --no-install-recommends intel-oneapi-compiler-dpcpp-cpp-${{ matrix.oneapi-compiler }}
          sudo apt-get install --no-install-recommends intel-oneapi-mpi-${{ matrix.oneapi-mpi }} intel-oneapi-mpi-devel-${{ matrix.oneapi-mpi }}
          ls /opt/intel/oneapi /opt/intel/oneapi/compiler /opt/intel/oneapi/mpi

      - name: Verify Intel compilers & MPI
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
          echo "PATH='$PATH'"
          echo "LD_LIBRARY_PATH='$LD_LIBRARY_PATH'"
          echo "[Verify icc path] $(which icc 2>/dev/null || echo not found)"
          echo "[Verify icpc path] $(which icpc 2>/dev/null || echo not found)"
          echo "[Verify icx path] $(which icx 2>/dev/null || echo not found)"
          echo "[Verify icpx path] $(which icpx 2>/dev/null || echo not found)"
          echo "[Verify mpiicc path] $(which mpiicc 2>/dev/null || echo not found)"
          echo "[Verify mpiicpc path] $(which mpiicpc 2>/dev/null || echo not found)"
          echo "[Verify mpirun path] $(which mpirun 2>/dev/null || echo not found)"
          echo "[Check icc version]" && icc --version 2>/dev/null || echo "not found"
          echo "[Check icpc version]" && icpc --version 2>/dev/null || echo "not found"
          echo "[Check icx version]" && icx --version 2>/dev/null || echo "not found"
          echo "[Check icpx version]" && icpx --version 2>/dev/null || echo "not found"
          echo "[Check mpiicc version]" && mpiicc --version 2>/dev/null || echo "not found"
          echo "[Check mpiicpc version]" && mpiicpc --version 2>/dev/null || echo "not found"
          echo "[Check mpirun version]" && mpirun --version 2>/dev/null || echo "not found"

      - name: Setup Intel oneAPI MPI
        if:   ${{ oneapi-compiler == 2025.1 }}
        run: |
          echo "I_MPI_CC=icx I_MPI_CXX=icpx" >> $GITHUB_ENV
          echo "TEST_CC=icx TEST_CXX=icpx TEST_MPICC=mpiicc TEST_MPICXX=mpiicpc" >> $GITHUB_ENV

      - name: Setup Intel classic MPI
        if:   ${{ oneapi-compiler == 2021.16 }}
        run: |
          echo "I_MPI_CC=icc I_MPI_CXX=icpc" >> $GITHUB_ENV
          echo "TEST_CC=icc TEST_CXX=icpc TEST_MPICC=mpiicc TEST_MPICXX=mpiicpc" >> $GITHUB_ENV

      - name: Build tests in test/ folder
        run: |
          cd test
          make

      - name: Run tests in test/ folder
        run: |
          cd test
          ./ex01.hello-gcc.exe
          ./ex02.hello-g++.exe
          mpirun -n 2 ./ex03.hello-mpicc.exe
          mpirun -n 2 ./ex04.hello-mpic++.exe
